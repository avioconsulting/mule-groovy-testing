<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.avioconsulting.mule</groupId>
    <artifactId>testing</artifactId>
    <version>2.0.44</version>
    <packaging>jar</packaging>

    <properties>
        <!-- This does not mean this framework can only be used with 4.2.2. It's just what it's built/tested
         against -->
        <app.runtime>4.2.2</app.runtime>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <groovy.compiler.version>2.4.15</groovy.compiler.version>
    </properties>

    <distributionManagement>
        <repository>
            <id>avio-releases</id>
            <name>AVIO Releases Repository</name>
            <url>https://devops.avioconsulting.com/nexus/repository/avio-releases/</url>
            <layout>default</layout>
        </repository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <compilerId>groovy-eclipse-compiler</compilerId>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-eclipse-compiler</artifactId>
                        <version>3.0.0-01</version>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-eclipse-batch</artifactId>
                        <version>${groovy.compiler.version}-02</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <!-- We shade this dependency because we only need
         JdkOnlyClassLoaderFactory from it-->
                                    <include>org.mule.runtime:mule-embedded-api</include>
                                </includes>
                            </artifactSet>
                            <minimizeJar>true</minimizeJar>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>2.1.0</version>
                <executions>
                    <execution>
                        <id>dostuff</id>
                        <phase>package</phase>
                        <goals>
                            <goal>generate-daemons</goal>
                        </goals>
                        <configuration>
                            <repositoryLayout>flat</repositoryLayout>
                            <daemons>
                                <daemon>
                                    <id>app1</id>
                                    <wrapperMainClass>org.tanukisoftware.wrapper.WrapperSimpleApp</wrapperMainClass>
                                    <mainClass>com.avioconsulting.mule.testing.junit.BackgroundRunner</mainClass>
                                    <platforms>
                                        <platform>jsw</platform>
                                    </platforms>
                                </daemon>
                            </daemons>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Provided scope dependencies minimize the impact to the application under test
         and also make it more explicit that we're depending on the actual engine dependencies
         to be resolved by the dependency-resolver-maven-plugin -->
        <dependency>
            <groupId>org.mule.runtime</groupId>
            <artifactId>mule-api</artifactId>
            <version>1.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.mule.runtime</groupId>
            <artifactId>mule-core</artifactId>
            <version>${app.runtime}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mule.runtime</groupId>
            <artifactId>mule-module-deployment</artifactId>
            <version>${app.runtime}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mule.runtime</groupId>
            <artifactId>mule-module-launcher</artifactId>
            <version>${app.runtime}</version>
            <scope>provided</scope>
        </dependency>
        <!-- We provide batch support -->
        <dependency>
            <groupId>com.mulesoft.mule.runtime.modules</groupId>
            <artifactId>mule-module-batch-ee</artifactId>
            <version>${app.runtime}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Begin bootstrap required deps, so can't be provided -->
        <!-- We shade this dependency because we only need
         JdkOnlyClassLoaderFactory from it-->
        <dependency>
            <groupId>org.mule.runtime</groupId>
            <artifactId>mule-embedded-api</artifactId>
            <version>1.1.3</version>
        </dependency>
        <!-- Serialization back and forth -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.11.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.11.0</version>
        </dependency>
        <!-- Strictly speaking, we wouldn't usually need log4j-slf4j-impl in here.
         That said, since tests START (meaning the logger that logs the initial engine startup)
          running within the normal Maven classloader paths, if the app has an older
         slf4j dependency (like Mule's JSON logger), it will conflict with the newer log4j2 version we depend on.
         Therefore we should be able to prevent the older version from happening by requiring this.
         It should only affect testing since this POM's artifact is only used with a test scope. -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.11.0</version>
        </dependency>
        <!-- Normally slf4j-api would already be included via mule-embedded-api but since
         we are shading that, we need to explicitly supply it -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        <!-- log4j2/async -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.3.7</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-invoker</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy.compiler.version}</version>
        </dependency>
        <!-- for FilenameFinder -->
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.9.7</version>
        </dependency>
        <!--
        // this used to be included when the app under test had the SOAP APIKit Router in it
        // in 4.x, this is no longer the case. Since the dependency graph for wsdl4j is relatively
        // simple, will just include it here even for test library consumers that are using
        // REST only and not SOAP -->
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
            <version>1.6.3</version>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <repositories>
        <repository>
            <id>maven-central</id>
            <name>maven central</name>
            <url>http://central.maven.org/maven2/</url>
            <layout>default</layout>
        </repository>
        <repository>
            <id>mulesoft-releases</id>
            <name>MuleSoft Releases Repository</name>
            <url>https://repository.mulesoft.org/releases/</url>
            <layout>default</layout>
        </repository>
        <!-- for staxutils -->
        <repository>
            <id>mulesoft-public</id>
            <name>Mulesoft public repo</name>
            <url>https://repository.mulesoft.org/nexus/content/repositories/public</url>
            <layout>default</layout>
        </repository>
        <repository>
            <id>avio-mule-ee-releases</id>
            <name>AVIO MuleEE Releases Repository</name>
            <url>https://devops.avioconsulting.com/nexus/repository/mulesoft-ee-releases/</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>mulesoft-releases</id>
            <name>mulesoft release repository</name>
            <layout>default</layout>
            <url>https://repository.mulesoft.org/releases/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>avio-releases</id>
            <name>AVIO Releases Repository</name>
            <url>https://devops.avioconsulting.com/nexus/repository/avio-releases/</url>
            <layout>default</layout>
        </pluginRepository>
        <pluginRepository>
            <id>groovy</id>
            <name>Groovy</name>
            <layout>default</layout>
            <url>https://dl.bintray.com/groovy/maven/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
