plugins {
    id 'com.intershop.gradle.jaxb' version '2.0.0'
}

group 'com.avioconsulting.mule'
version '2.0.0'

configurations {
    provided
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

sourceCompatibility = 1.8

def getMavenCreds = { String id ->
    def m2Dir = new File(System.getProperty('user.home'), '.m2')
    def settingsXmlPath = new File(m2Dir, 'settings.xml')
    assert settingsXmlPath.exists()
    def xmlNode = new XmlParser().parse(settingsXmlPath.absolutePath)
    def serverCreds = xmlNode.servers.server.find { node -> node.id.text() == id }
    assert serverCreds != null
    [user: serverCreds.username.text(), password: serverCreds.password.text()]
}

def eeCreds = getMavenCreds('avio-mule-ee-releases')

repositories {
    mavenCentral()
    maven {
        url "http://repository.mulesoft.org/releases"
    }
    maven {
        url "http://repo.spring.io/plugins-release/"
    }
    maven {
        // staxutils
        url "https://repository.mulesoft.org/nexus/content/repositories/public/"
    }
    maven {
        credentials {
            username eeCreds.user
            password eeCreds.password
        }
        url "https://devops.avioconsulting.com/nexus/repository/mulesoft-ee-releases/"
    }
}

jaxb {
    javaGen {
        withoutXmlRoot {
            sourceSetName = 'test'
            schema = file('src/test/resources/soap/SOAPTest_v1.xsd')
        }

        withXmlRoot {
            sourceSetName = 'test'
            schema = file('src/test/resources/soap_xmlroot/SOAPTest_v1.xsd')
            packageName = 'com.avioconsulting.mule.testing.soapxmlroot'
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://devops.avioconsulting.com/nexus/repository/avio-releases/') {
                authentication userName: eeCreds.user,
                               password: eeCreds.password
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

clean {
    // generated by our tests
    delete 'src/test/resources/maven/target'
    delete '.mule'
    // IntelliJ
    delete 'out'
}

dependencies {
    def muleVersion = '4.1.2'
    compile("org.mule.distributions:mule-module-embedded-impl:${muleVersion}")
    compile "com.mulesoft.mule.distributions:mule-runtime-impl-bom:${muleVersion}"
    // unlike almost every other module, the batch module does NOT need to be added to a project POM
    // so we have to add it here otherwise it will not be available on the classpath when we run it
    compile group: 'com.mulesoft.mule.runtime.modules',
            name: 'mule-module-batch-ee',
            version: muleVersion
    compile 'xalan:xalan:2.7.2'
    // 3.9.1 is bundled with this Groovy version
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    compile group: 'junit', name: 'junit', version: '4.11'
    // this used to be included when the app under test had the SOAP APIKit Router in it
    // in 4.x, this is no longer the case. Since the dependency graph for wsdl4j is relatively
    // simple, will just include it here even for test library consumers that are using
    // REST only and not SOAP
    compile 'wsdl4j:wsdl4j:1.6.3'
    testCompile 'org.apache.ant:ant:1.9.7'
    compile group: 'org.apache.maven.shared', name: 'maven-invoker', version: '3.0.1'
}

test {
    systemProperty 'maven.home', System.getProperty('maven.home')
}
